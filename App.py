# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gKdPXh105Ebb4j_RB-UtSpEpPWfvUn0
"""

pip install streamlit
import streamlit as st
import torch
import torch.nn as nn
import matplotlib.pyplot as plt
import numpy as np

# Define the same VAE model architecture
class VAE(nn.Module):
    def __init__(self):
        super(VAE, self).__init__()
        self.fc1 = nn.Linear(784, 400)
        self.fc21 = nn.Linear(400, 20)
        self.fc22 = nn.Linear(400, 20)
        self.fc3 = nn.Linear(20, 400)
        self.fc4 = nn.Linear(400, 784)

    def encode(self, x):
        h1 = torch.relu(self.fc1(x))
        return self.fc21(h1), self.fc22(h1)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def decode(self, z):
        h3 = torch.relu(self.fc3(z))
        return torch.sigmoid(self.fc4(h3))

    def forward(self, x):
        mu, logvar = self.encode(x.view(-1, 784))
        z = self.reparameterize(mu, logvar)
        return self.decode(z), mu, logvar

# Load model
device = torch.device("cpu")
model = VAE().to(device)
model.load_state_dict(torch.load("vae_mnist.pth", map_location=device))
model.eval()

st.title("MNIST Digit Generator")
digit = st.number_input("Choose a digit (0â€“9):", 0, 9, step=1)

if st.button("Generate"):
    st.write(f"Generated samples for digit {digit}")
    fig, axes = plt.subplots(1, 5, figsize=(10, 2))
    for i in range(5):
        z = torch.randn(1, 20)  # Random latent vector
        sample = model.decode(z).view(28, 28).detach().numpy()
        axes[i].imshow(sample, cmap='gray')
        axes[i].axis('off')
    st.pyplot(fig)
